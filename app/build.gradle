apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

def getTimeStamp() {
    new Date().format('YYYYMMdd_hhmmss').toString();
}
android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "com.emrassistnew.audio"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 26
        versionName "3.0.5"
        multiDexEnabled = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storeFile file(keystoreProperties["storeFile"])
            storePassword keystoreProperties["storePassword"]
        }
    }

    bundle {
        density {
            enableSplit true
        }
        abi {
            enableSplit true
        }
        language {
            enableSplit false
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    flavorDimensions 'default'
    productFlavors {
        Dev {
            buildConfigField "String", "BASE_URL_MAIN", '\"https://staging.emrassist.com/mgt/api/\"'
        }
        Production {
            buildConfigField "String", "BASE_URL_MAIN", '\"https://emrassist.com/mgt/api/\"'
        }
    }
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFileName = "CRTX_EMR_${variant.versionName}(${variant.versionCode})_${getTimeStamp()}_${variant.name}.apk"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-core:19.0.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'
    implementation 'com.google.firebase:firebase-crashlytics:18.1.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

// hilt

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

// Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'

    implementation 'androidx.fragment:fragment-ktx:1.3.5'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"

    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"

    def nav_version = "2.3.5"
// Kotlin
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

// Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"

// Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"

// Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha04"

// for passing data between fragments. and for phandling toolbar functionality
    implementation 'org.greenrobot:eventbus:3.1.1'

// multidex
    implementation 'androidx.multidex:multidex:2.0.1'
// loaders
    implementation 'com.agrawalsuneet.androidlibs:dotsloader:1.4.1'

// swipe to refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
// glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
// prefences
    implementation "androidx.preference:preference-ktx:1.1.1"

// for showing audio visuals.
    implementation 'com.cleveroad:audiovisualization:1.0.0'

// for taking pin
    implementation('com.alimuzaffar.lib:pinentryedittext:1.3.10') {
        // Exclude is only needed if you already have
        // any of the following as a dependency in your project.
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
    }
// for picking country
    implementation 'com.github.joielechong:countrycodepicker:2.4.1'

// for multiple screen sizing
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
// for multiple font sizing.
    implementation 'com.intuit.ssp:ssp-android:1.0.6'
// for requesting permission
    implementation 'com.nabinbhandari.android:permissions:3.8'
// exoplayer
    implementation 'com.google.android.exoplayer:exoplayer-core:2.7.3'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.7.3'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.7.3'

    // Room
    def room = "2.3.0"
    implementation "androidx.room:room-runtime:$room"
    implementation "androidx.room:room-ktx:$room"
    kapt "androidx.room:room-compiler:$room"

    // audio recorder
    implementation project(':om-recorder')


    implementation 'com.amazonaws:aws-android-sdk-s3:2.7.7'
    implementation('com.amazonaws:aws-android-sdk-mobile-client:2.7.+@aar') { transitive = true }
    implementation('com.amazonaws:aws-android-sdk-auth-userpools:2.7.+@aar') { transitive = true }

    // circular image view
    implementation 'de.hdodenhof:circleimageview:3.1.0'
}


configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.+'
            }
        }
    }
}

kapt {
    correctErrorTypes true
}